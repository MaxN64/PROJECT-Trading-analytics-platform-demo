// server/src/db.js
import mongoose from "mongoose";
import { GridFSBucket } from "mongodb";
import dotenv from "dotenv";
dotenv.config();

let conn;
let imagesBucket;
let audioBucket;

export async function connectDB() {
  if (conn) return conn;
  conn = await mongoose.connect(process.env.MONGO_URI, {
    serverSelectionTimeoutMS: 5000,
  });

  imagesBucket = new GridFSBucket(mongoose.connection.db, { bucketName: "images" });
  audioBucket  = new GridFSBucket(mongoose.connection.db,  { bucketName: "audio" });

  console.log("MongoDB connected, GridFS buckets ready: images, audio");
  return mongoose.connection;
}

/** üëâ –í–µ—Ä–Ω—É—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π db (–Ω—É–∂–µ–Ω –º–∞—Ä—à—Ä—É—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ native driver) */
export function getDb() {
  const db = mongoose.connection?.db;
  if (!db) {
    throw new Error("DB is not initialized. Call connectDB() on server start.");
  }
  return db;
}

/** –ü–æ–ª—É—á–∏—Ç—å –±–∞–∫–µ—Ç –ø–æ —Ç–∏–ø—É */
export function getBucket(kind = "image") {
  return kind === "audio" ? audioBucket : imagesBucket;
}

/** –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤/—Å–∫—Ä–∏–ø—Ç–æ–≤) */
export async function closeDB() {
  if (!conn) return;
  await mongoose.disconnect();
  conn = undefined;
  imagesBucket = undefined;
  audioBucket = undefined;
  console.log("MongoDB disconnected");
}

/** –ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –±–∞–∫–µ—Ç–æ–≤ –ø–æ _id ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {bucketName, file} –∏–ª–∏ null */
export async function findFileInAnyBucket(objectId) {
  const db = mongoose.connection.db;
  const img = await db.collection("images.files").findOne({ _id: objectId });
  if (img) return { bucketName: "images", file: img };
  const aud = await db.collection("audio.files").findOne({ _id: objectId });
  if (aud) return { bucketName: "audio", file: aud };
  return null;
}

/** –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ _id, —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω—ã–π –±–∞–∫–µ—Ç */
export async function openDownloadStreamAny(objectId) {
  const found = await findFileInAnyBucket(objectId);
  if (!found) return null;
  const bucket = found.bucketName === "audio" ? audioBucket : imagesBucket;
  return { stream: bucket.openDownloadStream(objectId), file: found.file, bucketName: found.bucketName };
}

/** –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ _id, —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –±–∞–∫–µ—Ç */
export async function deleteFromAnyBucket(objectId) {
  const found = await findFileInAnyBucket(objectId);
  if (!found) return false;
  const bucket = found.bucketName === "audio" ? audioBucket : imagesBucket;
  await bucket.delete(objectId);
  return true;
}
